JSON for request/response bodies.

Authentication APIs

Base Path: /api/auth

Method	Endpoint	Request Body	Response	Description
POST	/register	{ username, email, password }	201 Created or 400 Error	Registers a new user
POST	/login	{ email, password }	{ token, userInfo }	Logs in user, returns JWT token
GET	/me	Authorization: Bearer token	{ user details }	Returns current logged-in user

User APIs

Base Path: /api/users

Method	Endpoint	Auth	Description
GET	/{id}	Yes	Fetch user profile
GET	/{id}/xp	Yes	Fetch user's XP balance
GET	/{id}/courses	Yes	Fetch courses created by user
GET	/{id}/enrolled	Yes	Fetch courses user is enrolled in

Course APIs

Base Path: /api/courses

Method	Endpoint	Auth	Request Body	Response	Description
GET	/	No	-	List of all courses	Get all available courses
GET	/{id}	No	-	Course detail	Get details of a specific course
POST	/	Yes	{ title, description, skillId }	Course created	Create a new course
POST	/{id}/enroll	Yes	{ userId }	Enrollment response	Enroll in a course if XP is sufficient
GET	/category/{name}	No	-	Courses list	Get courses filtered by skill name

Skill APIs

Base Path: /api/skills

Method	Endpoint	Auth	Description
GET	/	No	List all available skill categories and XP values

XP & Transactions APIs

Base Path: /api/xp

Method	Endpoint	Auth	Description
GET	/transactions	Yes	Get current user’s XP transaction history
POST	/transfer	Yes	Transfer XP between users (internal use)

Payment APIs

Base Path: /api/payments

Method	Endpoint	Auth	Request Body	Description
POST	/create	Yes	{ userId, xpAmount }	Initiates Razorpay payment and returns orderId
POST	/verify	Yes	{ razorpay_order_id, razorpay_payment_id, razorpay_signature }	Verifies payment and updates XP
GET	/history	Yes	-	Returns all payment history for user

Admin APIs (Optional for future expansion)

Base Path: /api/admin

Method	Endpoint	Description
GET	/users	List all users (admin only)
DELETE	/user/{id}	Delete a user (admin only)
POST	/skill	Add a new skill category

Security

All protected routes require Authorization: Bearer <JWT_TOKEN>.

Role-based access control can be added for admin endpoints.

Status Codes

200 OK – Request successful

201 Created – Resource created

400 Bad Request – Invalid input

401 Unauthorized – Auth failure

403 Forbidden – Insufficient permissions

404 Not Found – Resource does not exist

500 Internal Server Error – Unexpected issue
